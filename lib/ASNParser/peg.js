Peg = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "initializer": parse_initializer,
        "whitespace": parse_whitespace,
        "_": parse__,
        "newline": parse_newline,
        "symbol": parse_symbol,
        "goalnodes": parse_goalnodes,
        "contextnode": parse_contextnode,
        "contextnode_": parse_contextnode_,
        "evidencenode": parse_evidencenode,
        "evidencenode_": parse_evidencenode_,
        "strategynode": parse_strategynode,
        "strategynode_": parse_strategynode_,
        "goalnode": parse_goalnode,
        "goalnode_": parse_goalnode_,
        "annotations": parse_annotations,
        "annotation": parse_annotation,
        "goalbody": parse_goalbody,
        "description": parse_description,
        "notes": parse_notes,
        "note": parse_note,
        "notesubject": parse_notesubject,
        "notebody": parse_notebody,
        "tabindent": parse_tabindent,
        "notekeyvalues": parse_notekeyvalues,
        "notekeyvalue": parse_notekeyvalue,
        "key": parse_key,
        "value": parse_value,
        "goal": parse_goal,
        "nodedepth": parse_nodedepth,
        "context": parse_context,
        "strategy": parse_strategy,
        "evidence": parse_evidence
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_initializer();
        if (result0 !== null) {
          result1 = parse_goalnode();
          if (result1 !== null) {
            result2 = parse_whitespace();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_initializer() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = "";
        if (result0 !== null) {
          result0 = (function(offset) {
        		_PEG = {
        			CaseType: {
        				Goal: "Goal",
        				Context: "Context",
        				Strategy: "Strategy",
        				Evidence: "Evidence",
        				//Goal: 0,
        				//Context: 1,
        				//Strategy: 2,
        				//Evidence: 3,
        			},
        
        			Case: function() {
        				/* TODO */
        			},
        
        			CaseModel: function(Case, Parent, Type, Annotations, Statement, Notes) {
        				this.Case = Case;
        				this.Parent = Parent;
        				this.Type = Type;
        				this.Label = null; /* TODO how's Label used? */
        				this.Statement = Statement;
        				this.Children = [];
        				this.Annotations = Annotations;
        				this.Notes = Notes;
        				this.x = 0;
        				this.y = 0;
        			},
        			CaseNote: function(Name, Body) {
        				this.Name = Name;
        				this.Body = Body;
        			},
        			currentParsingLevel: 1,
        		};
        		return "";
        	})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_whitespace() {
        var result0, result1;
        
        result0 = [];
        result1 = parse__();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse__();
        }
        return result0;
      }
      
      function parse__() {
        var result0;
        
        if (/^[ \t\r]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\r]");
          }
        }
        return result0;
      }
      
      function parse_newline() {
        var result0;
        
        if (/^[\n]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n]");
          }
        }
        return result0;
      }
      
      function parse_symbol() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[a-z]/i.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[a-z]i");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[a-z]/i.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[a-z]i");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[0-9a-z]/i.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9a-z]i");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[0-9a-z]/i.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9a-z]i");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, symbol) { return symbol[0].join("") + symbol[1].join(""); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_goalnodes() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) { _PEG.currentParsingLevel += 1; return true; })(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_goalnode();
          if (result1 !== null) {
            result2 = [];
            pos2 = pos;
            result3 = parse_newline();
            result3 = result3 !== null ? result3 : "";
            if (result3 !== null) {
              result4 = parse_goalnode();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = pos;
              result3 = parse_newline();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_goalnode();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
            }
            if (result2 !== null) {
              result3 = (function(offset, head, tail) { _PEG.currentParsingLevel -= 1; return true; })(pos, result1, result2) ? "" : null;
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
        		var res = [head];
        		for (var i in tail) {
        			res.push(tail[i][1]);
        		}
        		return res;
        	})(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_contextnode() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_contextnode_();
        if (result0 !== null) {
          result0 = (function(offset, node) { return node; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_contextnode_() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_nodedepth();
        if (result0 !== null) {
          result1 = (function(offset, depth) { return depth == _PEG.currentParsingLevel; })(pos, result0) ? "" : null;
          if (result1 !== null) {
            result2 = parse_whitespace();
            if (result2 !== null) {
              result3 = parse_context();
              if (result3 !== null) {
                result4 = parse_whitespace();
                if (result4 !== null) {
                  result5 = parse_annotations();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    pos2 = pos;
                    result6 = parse_newline();
                    if (result6 !== null) {
                      result7 = parse_goalbody();
                      if (result7 !== null) {
                        result6 = [result6, result7];
                      } else {
                        result6 = null;
                        pos = pos2;
                      }
                    } else {
                      result6 = null;
                      pos = pos2;
                    }
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, depth, context, anno, body) {
        		var desc = (body == "") ? "" : body[1].desc;
        		var notes = (body == "") ? "" : body[1].notes;
        		return new _PEG.CaseModel(null, null, _PEG.CaseType[context], anno, desc, notes);
        	})(pos0, result0[0], result0[3], result0[5], result0[6]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_evidencenode() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_evidencenode_();
        if (result0 !== null) {
          result0 = (function(offset, node) { return node; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_evidencenode_() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_nodedepth();
        if (result0 !== null) {
          result1 = (function(offset, depth) { return depth == _PEG.currentParsingLevel; })(pos, result0) ? "" : null;
          if (result1 !== null) {
            result2 = parse_whitespace();
            if (result2 !== null) {
              result3 = parse_evidence();
              if (result3 !== null) {
                result4 = parse_whitespace();
                if (result4 !== null) {
                  result5 = parse_annotations();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    pos2 = pos;
                    result6 = parse_newline();
                    if (result6 !== null) {
                      result7 = parse_goalbody();
                      if (result7 !== null) {
                        result6 = [result6, result7];
                      } else {
                        result6 = null;
                        pos = pos2;
                      }
                    } else {
                      result6 = null;
                      pos = pos2;
                    }
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, depth, evidence, anno, body) {
        		var desc = (body == "") ? "" : body[1].desc;
        		var notes = (body == "") ? "" : body[1].notes;
        		return new _PEG.CaseModel(null, null, _PEG.CaseType[evidence], anno, desc, notes);
        	})(pos0, result0[0], result0[3], result0[5], result0[6]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_strategynode() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_strategynode_();
        if (result0 !== null) {
          result1 = parse_contextnode();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_goalnodes();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, node, context, goalnodes) {
        		if (context != "") {
        			node.Children = node.Children.concat([context]);
        		}
        		if (goalnodes != "") {
        			node.Children = node.Children.concat(goalnodes);
        		}
        		return node;
        	})(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_strategynode_() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_nodedepth();
        if (result0 !== null) {
          result1 = (function(offset, depth) { return depth == _PEG.currentParsingLevel; })(pos, result0) ? "" : null;
          if (result1 !== null) {
            result2 = parse_whitespace();
            if (result2 !== null) {
              result3 = parse_strategy();
              if (result3 !== null) {
                result4 = parse_whitespace();
                if (result4 !== null) {
                  result5 = parse_annotations();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    pos2 = pos;
                    result6 = parse_newline();
                    if (result6 !== null) {
                      result7 = parse_goalbody();
                      if (result7 !== null) {
                        result6 = [result6, result7];
                      } else {
                        result6 = null;
                        pos = pos2;
                      }
                    } else {
                      result6 = null;
                      pos = pos2;
                    }
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, depth, strategy, anno, body) {
        		var desc = (body == "") ? "" : body[1].desc;
        		var notes = (body == "") ? "" : body[1].notes;
        		return new _PEG.CaseModel(null, null, _PEG.CaseType[strategy], anno, desc, notes);
        	})(pos0, result0[0], result0[3], result0[5], result0[6]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_goalnode() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_goalnode_();
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_newline();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_contextnode();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            pos2 = pos;
            result2 = parse_newline();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_strategynode();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, node, context, strategy) { 
        		node.Children.push(context[1]);
        		node.Children.push(strategy[1]);
        		return node; 
        	})(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_goalnode_();
          if (result0 !== null) {
            pos2 = pos;
            result1 = parse_newline();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result2 = parse_contextnode();
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
            if (result1 !== null) {
              pos2 = pos;
              result2 = parse_newline();
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result3 = parse_evidencenode();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, node, context, evidence) { 
          		node.Children.push(context[1]);
          		node.Children.push(evidence[1]);
          		return node; 
          	})(pos0, result0[0], result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_goalnode_();
            if (result0 !== null) {
              pos2 = pos;
              result1 = parse_newline();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result2 = parse_contextnode();
                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, node, context) { 
            		node.Children.push(context[1]);
            		return node; 
            	})(pos0, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result0 = parse_goalnode_();
              if (result0 !== null) {
                pos2 = pos;
                result1 = parse_newline();
                result1 = result1 !== null ? result1 : "";
                if (result1 !== null) {
                  result2 = parse_evidencenode();
                  if (result2 !== null) {
                    result1 = [result1, result2];
                  } else {
                    result1 = null;
                    pos = pos2;
                  }
                } else {
                  result1 = null;
                  pos = pos2;
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, node, evidence) { 
              		node.Children.push(evidence[1]);
              		return node; 
              	})(pos0, result0[0], result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                result0 = parse_goalnode_();
                if (result0 !== null) {
                  pos2 = pos;
                  result1 = parse_newline();
                  result1 = result1 !== null ? result1 : "";
                  if (result1 !== null) {
                    result2 = parse_strategynode();
                    if (result2 !== null) {
                      result1 = [result1, result2];
                    } else {
                      result1 = null;
                      pos = pos2;
                    }
                  } else {
                    result1 = null;
                    pos = pos2;
                  }
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, node, strategy) { 
                		node.Children.push(strategy[1]);
                		return node; 
                	})(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  result0 = parse_goalnode_();
                  if (result0 !== null) {
                    result0 = (function(offset, node) { 
                  		return node; 
                  	})(pos0, result0);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_goalnode_() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_nodedepth();
        if (result0 !== null) {
          result1 = (function(offset, depth) { return depth == _PEG.currentParsingLevel; })(pos, result0) ? "" : null;
          if (result1 !== null) {
            result2 = parse_whitespace();
            if (result2 !== null) {
              result3 = parse_goal();
              if (result3 !== null) {
                result4 = parse_whitespace();
                if (result4 !== null) {
                  result5 = parse_annotations();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    pos2 = pos;
                    result6 = parse_newline();
                    if (result6 !== null) {
                      result7 = parse_goalbody();
                      if (result7 !== null) {
                        result6 = [result6, result7];
                      } else {
                        result6 = null;
                        pos = pos2;
                      }
                    } else {
                      result6 = null;
                      pos = pos2;
                    }
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, depth, goal, anno, body) {
        		var desc = (body == "") ? "" : body[1].desc;
        		var notes = (body == "") ? "" : body[1].notes;
        		return new _PEG.CaseModel(null, null, _PEG.CaseType[goal], anno, desc, notes);
        	})(pos0, result0[0], result0[3], result0[5], result0[6]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_annotations() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_annotation();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_whitespace();
          if (result2 !== null) {
            result3 = parse_annotation();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_whitespace();
            if (result2 !== null) {
              result3 = parse_annotation();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
        		var res = [head];
        		for (var i in tail) {
        			res.push(tail[i][1]);
        		}
        		return res;
        	})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_annotation() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 64) {
          result0 = "@";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"@\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_symbol();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, symbol) { return symbol; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_goalbody() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        result0 = parse_notes();
        if (result0 !== null) {
          result0 = (function(offset, notes) {return {notes:notes};})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          pos2 = pos;
          reportFailures++;
          result0 = parse_tabindent();
          reportFailures--;
          if (result0 === null) {
            result0 = "";
          } else {
            result0 = null;
            pos = pos2;
          }
          if (result0 !== null) {
            result1 = parse_description();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              pos2 = pos;
              result2 = parse_newline();
              if (result2 !== null) {
                result3 = parse_notes();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, description, notes) { return {notes: notes == "" ? [] : notes[1], desc: description}; })(pos0, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_description() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        if (/^[a-z0-9 ]/i.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[a-z0-9 ]i");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[a-z0-9 ]/i.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[a-z0-9 ]i");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, singleline) { return singleline.join(""); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_notes() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_note();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_newline();
          if (result2 !== null) {
            result3 = parse_note();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_newline();
            if (result2 !== null) {
              result3 = parse_note();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) { 
        		var res = [head];
        		for (var i in tail) {
        			res.push(tail[i][1]);
        		}
        		return res;
        	})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_note() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_notesubject();
        if (result0 !== null) {
          result1 = parse_whitespace();
          if (result1 !== null) {
            if (input.substr(pos, 2) === "::") {
              result2 = "::";
              pos += 2;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"::\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_notebody();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, subject, body) { return new _PEG.CaseNote(subject, body == "" ? {} : body); })(pos0, result0[0], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_notesubject() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_symbol();
        if (result0 !== null) {
          result0 = (function(offset, subject) { return subject; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_notebody() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_notekeyvalues();
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_newline();
          if (result1 !== null) {
            result2 = parse_tabindent();
            if (result2 !== null) {
              result3 = parse_description();
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, kvs, desc) {
        		if (desc != "") {
        			kvs.push(["Description", desc[2]]);
        		}
        		return kvs;
        	})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_newline();
          if (result0 !== null) {
            result1 = parse_tabindent();
            if (result1 !== null) {
              result2 = parse_description();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, desc) { return ["Description", desc[2]]; })(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_tabindent() {
        var result0, result1;
        
        if (/^[\t ]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[\\t ]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[\t ]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[\\t ]");
              }
            }
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_notekeyvalues() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_newline();
        if (result0 !== null) {
          result1 = parse_tabindent();
          if (result1 !== null) {
            result2 = parse_notekeyvalue();
            if (result2 !== null) {
              result3 = [];
              pos2 = pos;
              result4 = parse_newline();
              if (result4 !== null) {
                result5 = parse_tabindent();
                if (result5 !== null) {
                  result6 = parse_notekeyvalue();
                  if (result6 !== null) {
                    result4 = [result4, result5, result6];
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
              } else {
                result4 = null;
                pos = pos2;
              }
              while (result4 !== null) {
                result3.push(result4);
                pos2 = pos;
                result4 = parse_newline();
                if (result4 !== null) {
                  result5 = parse_tabindent();
                  if (result5 !== null) {
                    result6 = parse_notekeyvalue();
                    if (result6 !== null) {
                      result4 = [result4, result5, result6];
                    } else {
                      result4 = null;
                      pos = pos2;
                    }
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
              }
              if (result3 !== null) {
                pos2 = pos;
                reportFailures++;
                result4 = parse_note();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos2;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) { 
        		var res = [head];
        		for (var i in tail) {
        			res.push(tail[i][2]);
        		}
        		return res;
        	})(pos0, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_notekeyvalue() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_key();
        if (result0 !== null) {
          result1 = parse_whitespace();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 58) {
              result2 = ":";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\":\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_whitespace();
              if (result3 !== null) {
                result4 = parse_value();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, key, value) { return [key, value]; })(pos0, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_key() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_symbol();
        if (result0 !== null) {
          result0 = (function(offset, key) { return key; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_value() {
        var result0;
        
        result0 = parse_symbol();
        return result0;
      }
      
      function parse_goal() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 4) === "goal") {
          result0 = "goal";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"goal\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 4) === "Goal") {
            result0 = "Goal";
            pos += 4;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"Goal\"");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, text) { return "Goal"; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_nodedepth() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[*]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[*]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[*]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[*]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, asterisks) { return asterisks.length; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_context() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 7) === "context") {
          result0 = "context";
          pos += 7;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"context\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 7) === "Context") {
            result0 = "Context";
            pos += 7;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"Context\"");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, text) { return "Context"; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_strategy() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 8) === "strategy") {
          result0 = "strategy";
          pos += 8;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"strategy\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 8) === "Strategy") {
            result0 = "Strategy";
            pos += 8;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"Strategy\"");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, text) { return "Strategy"; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_evidence() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 8) === "evidence") {
          result0 = "evidence";
          pos += 8;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"evidence\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 8) === "Evidence") {
            result0 = "Evidence";
            pos += 8;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"Evidence\"");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, text) { return "Evidence"; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
